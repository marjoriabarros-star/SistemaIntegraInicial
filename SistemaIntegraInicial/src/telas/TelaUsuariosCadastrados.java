/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package telas;

/**
 *
 * @author Marjori Barros
 */
import java.util.List; 
import java.util.ArrayList; 
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class TelaUsuariosCadastrados extends javax.swing.JFrame {

    private final String tipoUsuario;

    /**
     * Creates new form TelaUsuáriosCadastrados
     */
        public TelaUsuariosCadastrados() {
        initComponents();
        setLocationRelativeTo(null);
        this.tipoUsuario = "Visitante";
        configurarPermissoes("Visitante");
        atualizarLabelUsuario();
    }
    
    public TelaUsuariosCadastrados(String tipoUsuario) {
        initComponents();
        setLocationRelativeTo(null);
        this.tipoUsuario = tipoUsuario;
        setTitle("Processos Cadastrados - " + tipoUsuario);
        configurarPermissoes(tipoUsuario);
        carregarDados();
        configurarActionListeners();
        atualizarLabelUsuario();      
     }
    private void atualizarLabelUsuario() {
    System.out.println("DEBUG: atualizarLabelUsuario() chamado - tipoUsuario = " + tipoUsuario);
    
    if (jLabel4 != null && tipoUsuario != null) {
        jLabel4.setText("Bem-vindo(a), " + tipoUsuario + "!");
        System.out.println("DEBUG: Texto definido para: " + jLabel4.getText());
    }
}
    private void configurarActionListeners() {
    btnFiltrar.addActionListener(evt -> btnFiltrarActionPerformed(evt));
    btnExcluirSelecionado.addActionListener(evt -> btnExcluirSelecionadoActionPerformed(evt));
    btnAlterarSelecionado.addActionListener(evt -> btnAlterarSelecionadoActionPerformed(evt));
   }
        private void configurarPermissoes(String tipoUsuario) {
        boolean podeGerenciar = tipoUsuario.equals("Administrador") || 
                               tipoUsuario.equals("Direção") ||
                               tipoUsuario.equals("Gerência");
        
        btnExcluirSelecionado.setEnabled(podeGerenciar);
        btnAlterarSelecionado.setEnabled(podeGerenciar);
        btnCriarNovoUsuSelec.setEnabled(podeGerenciar);
        
        if (!podeGerenciar) {
            String tooltip = "Acesso restrito para " + tipoUsuario;
            btnExcluirSelecionado.setToolTipText(tooltip);
            btnAlterarSelecionado.setToolTipText(tooltip);
            btnCriarNovoUsuSelec.setToolTipText(tooltip);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableUsuarios = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txtFiltro = new javax.swing.JTextField();
        btnFiltrar = new javax.swing.JButton();
        btnExcluirSelecionado = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        btnAlterarSelecionado = new javax.swing.JButton();
        btnCriarNovoUsuSelec = new javax.swing.JButton();
        btnVoltarUsu = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Usuários cadastrados");

        tableUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "Email", "Cargo", "Setor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableUsuarios);

        jLabel2.setText("Filtro por Nome:");

        btnFiltrar.setText("Filtrar");
        btnFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltrarActionPerformed(evt);
            }
        });

        btnExcluirSelecionado.setText("Excluir selecionado");
        btnExcluirSelecionado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirSelecionadoActionPerformed(evt);
            }
        });

        jLabel3.setText("Setor:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Atendimento", "Contábil", "Declarações", "Financeiro", "Fiscal", "RH", "Societário", "TI" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        btnAlterarSelecionado.setText("Alterar selecionado");
        btnAlterarSelecionado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarSelecionadoActionPerformed(evt);
            }
        });

        btnCriarNovoUsuSelec.setText("Criar novo a partir de  selecionado");
        btnCriarNovoUsuSelec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCriarNovoUsuSelecActionPerformed(evt);
            }
        });

        btnVoltarUsu.setText("Voltar");
        btnVoltarUsu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarUsuActionPerformed(evt);
            }
        });

        jLabel4.setText("Bem-vindo(a), [Usuário]! ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jScrollPane1)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(24, 24, 24)
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(btnFiltrar))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(btnExcluirSelecionado)
                                                .addGap(18, 18, 18)
                                                .addComponent(btnAlterarSelecionado))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(192, 192, 192)
                                                .addComponent(btnVoltarUsu)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnCriarNovoUsuSelec))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(174, 174, 174)
                                .addComponent(jLabel1)))
                        .addGap(0, 55, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFiltrar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExcluirSelecionado)
                    .addComponent(btnAlterarSelecionado)
                    .addComponent(btnCriarNovoUsuSelec))
                .addGap(18, 18, 18)
                .addComponent(btnVoltarUsu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
    carregarDados();
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void btnCriarNovoUsuSelecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCriarNovoUsuSelecActionPerformed
     // Verificar se há uma linha selecionada
    int linhaSelecionada = tableUsuarios.getSelectedRow();
    if (linhaSelecionada == -1) {
        JOptionPane.showMessageDialog(this, 
            "Selecione um usuário para usar como base!", 
            "Aviso", JOptionPane.WARNING_MESSAGE);
        return;
    }
    
    // Verificar permissões
    if (!usuarioPodeGerenciar()) {
        JOptionPane.showMessageDialog(this, 
            "Acesso negado! Apenas Administradores e Direção podem criar usuários.",
            "Acesso Negado", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    // Obter dados do usuário selecionado (exceto ID e email)
    String nomeBase = (String) tableUsuarios.getValueAt(linhaSelecionada, 1);
    String cargoBase = (String) tableUsuarios.getValueAt(linhaSelecionada, 3);
    String setorBase = (String) tableUsuarios.getValueAt(linhaSelecionada, 4);
    
    // Confirmar criação com base no usuário selecionado
    int confirmacao = JOptionPane.showConfirmDialog(this,
        "Deseja criar um novo usuário com base nas informações de:\n" +
        "Nome: " + nomeBase + "\n" +
        "Cargo: " + cargoBase + "\n" +
        "Setor: " + setorBase + "?",
        "Criar Novo Usuário", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
    
    if (confirmacao == JOptionPane.YES_OPTION) {
        abrirTelaCriacaoComBase(nomeBase, cargoBase, setorBase);
    }
                    
    }//GEN-LAST:event_btnCriarNovoUsuSelecActionPerformed

    private void btnVoltarUsuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarUsuActionPerformed
      // Navegação segura mantendo as permissões do usuário
        if (tipoUsuario == null) {
        JOptionPane.showMessageDialog(this, 
            "Erro: informações de usuário não encontradas. Retornando ao login.",
            "Erro", JOptionPane.ERROR_MESSAGE);
        new TelaLogin().setVisible(true);
    } else {
        new TelaUsuarios(tipoUsuario).setVisible(true);
    }
    this.dispose();
    }//GEN-LAST:event_btnVoltarUsuActionPerformed

    private void btnExcluirSelecionadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirSelecionadoActionPerformed
      // Verificar se há uma linha selecionada
    int linhaSelecionada = tableUsuarios.getSelectedRow();
    if (linhaSelecionada == -1) {
        JOptionPane.showMessageDialog(this, 
            "Selecione um usuário para excluir!", 
            "Aviso", JOptionPane.WARNING_MESSAGE);
        return;
    }
    
    // Verificar permissões
    if (!usuarioPodeGerenciar()) {
        JOptionPane.showMessageDialog(this, 
            "Acesso negado! Apenas Administradores e Direção podem excluir usuários.",
            "Acesso Negado", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    // Obter ID do usuário selecionado
    int idUsuario = (int) tableUsuarios.getValueAt(linhaSelecionada, 0);
    String nomeUsuario = (String) tableUsuarios.getValueAt(linhaSelecionada, 1);
    
    // Confirmar exclusão
    int confirmacao = JOptionPane.showConfirmDialog(this,
        "Deseja realmente excluir o usuário:\n" + nomeUsuario + " (ID: " + idUsuario + ")?",
        "Confirmar Exclusão", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
    
    if (confirmacao == JOptionPane.YES_OPTION) {
        excluirUsuario(idUsuario);
    }
    }//GEN-LAST:event_btnExcluirSelecionadoActionPerformed

    private void btnFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltrarActionPerformed
    carregarDados();
    }//GEN-LAST:event_btnFiltrarActionPerformed

    private void btnAlterarSelecionadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarSelecionadoActionPerformed
        // Verificar se há uma linha selecionada
    int linhaSelecionada = tableUsuarios.getSelectedRow();
    if (linhaSelecionada == -1) {
        JOptionPane.showMessageDialog(this, 
            "Selecione um usuário para alterar!", 
            "Aviso", JOptionPane.WARNING_MESSAGE);
        return;
    }
        // Verificar permissões
    if (!usuarioPodeGerenciar()) {
        JOptionPane.showMessageDialog(this, 
            "Acesso negado! Apenas Administradores e Direção podem alterar usuários.",
            "Acesso Negado", JOptionPane.ERROR_MESSAGE);
        return;
    }
       // Obter dados do usuário selecionado
    int idUsuario = (int) tableUsuarios.getValueAt(linhaSelecionada, 0);
    String nome = (String) tableUsuarios.getValueAt(linhaSelecionada, 1);
    String email = (String) tableUsuarios.getValueAt(linhaSelecionada, 2);
    String cargo = (String) tableUsuarios.getValueAt(linhaSelecionada, 3);
    String setor = (String) tableUsuarios.getValueAt(linhaSelecionada, 4);
    
    // Abrir tela de cadastro em modo edição
    abrirTelaEdicaoUsuario(idUsuario, nome, email, cargo, setor);
}                                                    

// Método para abrir a tela de edição
    private void abrirTelaEdicaoUsuario(int id, String nome, String email, String cargo, String setor) {
    // Fechar esta tela
    this.dispose();
    // Abrir TelaCadastroUsuario em modo edição
    TelaCadastroUsuario telaEdicao = new TelaCadastroUsuario(tipoUsuario, id, nome, email, cargo, setor);
    telaEdicao.setVisible(true);
    }//GEN-LAST:event_btnAlterarSelecionadoActionPerformed

    // Método para abrir a tela de criação com base no usuário selecionado
    private void abrirTelaCriacaoComBase(String nomeBase, String cargoBase, String setorBase) {
    this.dispose();
    
    // Criar uma instância da TelaCadastroUsuario
    TelaCadastroUsuario telaCriacao = new TelaCadastroUsuario(tipoUsuario);
    telaCriacao.setVisible(true);
    
    // Preencher os campos com os dados base (exceto email que deve ser único)
    telaCriacao.preencherCamposComBase(nomeBase, cargoBase, setorBase);
}   
    // Método auxiliar para verificar permissões
    private boolean usuarioPodeGerenciar() {
    return tipoUsuario != null && 
          (tipoUsuario.equals("Administrador") || tipoUsuario.equals("Direção"));
}

// Método para excluir usuário do banco
private void excluirUsuario(int idUsuario) {
    try (Connection conn = DriverManager.getConnection(
        "jdbc:mysql://localhost:3306/integra_inicial", "root", "l5PV3IYH@")) {
        
        String sql = "DELETE FROM Usuarios WHERE id_usuario = ?";
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setInt(1, idUsuario);
        
        int linhasAfetadas = stmt.executeUpdate();
        
        if (linhasAfetadas > 0) {
            JOptionPane.showMessageDialog(this, 
                "Usuário excluído com sucesso!", 
                "Sucesso", JOptionPane.INFORMATION_MESSAGE);
            carregarDados(); // Recarrega a tabela
        } else {
            JOptionPane.showMessageDialog(this, 
                "Erro ao excluir usuário.", 
                "Erro", JOptionPane.ERROR_MESSAGE);
        }
        
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, 
            "Erro ao excluir usuário: " + e.getMessage(), 
            "Erro", JOptionPane.ERROR_MESSAGE);
    }
}
     private void carregarDados() {
    try (Connection conn = DriverManager.getConnection(
        "jdbc:mysql://localhost:3306/integra_inicial", "root", "l5PV3IYH@")) {
        
        StringBuilder sql = new StringBuilder(
            "SELECT u.id_usuario, u.nome, u.email, u.cargo, s.nome_setor " +
            "FROM Usuarios u LEFT JOIN Setores s ON u.setor_id = s.id_setor WHERE 1=1"
        );
        
        String filtroNome = txtFiltro.getText().trim();
        String setorSelecionado = (String) jComboBox1.getSelectedItem();
        
        List<Object> parametros = new ArrayList<>();
        
        if (!filtroNome.isEmpty()) {
            sql.append(" AND u.nome LIKE ?");
            parametros.add("%" + filtroNome + "%");
        }
        
        if (!"Todos".equals(setorSelecionado)) {
            sql.append(" AND s.nome_setor = ?");
            parametros.add(setorSelecionado);
        }
        
        PreparedStatement stmt = conn.prepareStatement(sql.toString());
        
        for (int i = 0; i < parametros.size(); i++) {
            stmt.setObject(i + 1, parametros.get(i));
        }
        
        ResultSet rs = stmt.executeQuery();

        
        // Criar modelo da tabela
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Nome");
        model.addColumn("Email");
        model.addColumn("Cargo");
        model.addColumn("Setor");
        
        
       while (rs.next()) {
            model.addRow(new Object[]{
                rs.getInt("id_usuario"),
                rs.getString("nome"),
                rs.getString("email"),
                rs.getString("cargo"),
                rs.getString("nome_setor")    
    });
        }
        
        tableUsuarios.setModel(model);
        
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, 
            "Erro ao carregar dados: " + e.getMessage(), 
            "Erro", JOptionPane.ERROR_MESSAGE);
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaUsuariosCadastrados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaUsuariosCadastrados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaUsuariosCadastrados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaUsuariosCadastrados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
  
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlterarSelecionado;
    private javax.swing.JButton btnCriarNovoUsuSelec;
    private javax.swing.JButton btnExcluirSelecionado;
    private javax.swing.JButton btnFiltrar;
    private javax.swing.JButton btnVoltarUsu;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableUsuarios;
    private javax.swing.JTextField txtFiltro;
    // End of variables declaration//GEN-END:variables
}
